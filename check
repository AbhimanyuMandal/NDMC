library(forecast)
library(xts)
library(zoo)
library(aTSA)
library(tscount)
library(spData)
library(sf)
library(spdep)
library(ggplot2)
library(scales)
#library(statmod)
library(spdep)
library(raster)
library(sp)
library(sf)
library(readxl)
library(dplyr)
#install.packages("lubridate")
library(lubridate)

####Loading the spatial file with coordinates####
setwd("/Users/abhimanyu/Documents/")
INDIA <- readRDS('gadm36_IND_2_sf.rds') #shapefile 
MH_sp  <- subset(INDIA, NAME_1=="Maharashtra") ##Filter out the data from Maharashtra
MH_sp$GID_2 <- 1:nrow(MH_sp)  # Create unique district IDs
N <- length(unique(MH_sp$NAME_2))  # Get the number of districts

# Convert to simple feature (sf) object for spatial operations
MH_sf <- st_as_sf(MH_sp)
##Change directory containing files
setwd("/Volumes/T7/Notification/Diagnosed/")

Jan_22 <- read_excel("NotificationRegister_2022_January_notification_date.xlsx")
colnames(Jan_22) <- Jan_22[5, ] ##Change the column name
Jan_22 <- Jan_22[-(1:5),] ##Remove the first 5 rows
Jan_22$Year <- 2022
Jan_22$Month <- "January"

Feb_22 <- read_excel("NotificationRegister_2022_February_notification_date.xlsx")
colnames(Feb_22) <- Feb_22[5, ] ##Change the column name
Feb_22 <- Feb_22[-(1:5),] ##Remove the first 5 rows
Feb_22$Year <- 2022
Feb_22$Month <- "February"

Mar_22 <- read_excel("NotificationRegister_2022_March_notification_date.xlsx")
colnames(Mar_22) <- Mar_22[5, ] ##Change the column name
Mar_22 <- Mar_22[-(1:5),] ##Remove the first 5 rows
Mar_22$Year <- 2022
Mar_22$Month <- "March"

Apr_22 <- read_excel("NotificationRegister_2022_April_notification_date.xlsx")
colnames(Apr_22) <- Apr_22[5, ] ##Change the column name
Apr_22 <- Apr_22[-(1:5),] ##Remove the first 5 rows
Apr_22$Year <- 2022
Apr_22$Month <- "April"

May_22 <- read_excel("NotificationRegister_2022_May_notification_date.xlsx")
colnames(May_22) <- May_22[5, ] ##Change the column name
May_22 <- May_22[-(1:5),] ##Remove the first 5 rows
May_22$Year <- 2022
May_22$Month <- "May"

Jun_22 <- read_excel("NotificationRegister_2022_June_notification_date.xlsx")
colnames(Jun_22) <- Jun_22[5, ] ##Change the column name
Jun_22 <- Jun_22[-(1:5),] ##Remove the first 5 rows
Jun_22$Year <- 2022
Jun_22$Month <- "June"

Jul_22 <- read_excel("NotificationRegister_2022_July_notification_date.xlsx")
colnames(Jul_22) <- Jul_22[5, ] ##Change the column name
Jul_22 <- Jul_22[-(1:5),] ##Remove the first 5 rows
Jul_22$Year <- 2022
Jul_22$Month <- "July"

Aug_22 <- read_excel("NotificationRegister_2022_August_notification_date.xlsx")
colnames(Aug_22) <- Aug_22[5, ] ##Change the column name
Aug_22 <- Aug_22[-(1:5),] ##Remove the first 5 rows
Aug_22$Year <- 2022
Aug_22$Month <- "August"

Sep_22 <- read_excel("NotificationRegister_2022_September_notification_date.xlsx")
colnames(Sep_22) <- Sep_22[5, ] ##Change the column name
Sep_22 <- Sep_22[-(1:5),] ##Remove the first 5 rows
Sep_22$Year <- 2022
Sep_22$Month <- "September"

Oct_22 <- read_excel("NotificationRegister_2022_October_notification_date.xlsx")
colnames(Oct_22) <- Oct_22[5, ] ##Change the column name
Oct_22 <- Oct_22[-(1:5),] ##Remove the first 5 rows
Oct_22$Year <- 2022
Oct_22$Month <- "October"

Nov_22 <- read_excel("NotificationRegister_2022_November_notification_date.xlsx")
colnames(Nov_22) <- Nov_22[5, ] ##Change the column name
Nov_22 <- Nov_22[-(1:5),] ##Remove the first 5 rows
Nov_22$Year <- 2022
Nov_22$Month <- "November"

Dec_22 <- read_excel("NotificationRegister_2022_December_notification_date.xlsx")
colnames(Dec_22) <- Dec_22[5, ] ##Change the column name
Dec_22 <- Dec_22[-(1:5),] ##Remove the first 5 rows
Dec_22$Year <- 2022
Dec_22$Month <- "December"

data <- rbind(Jan_22,Feb_22,Mar_22,Apr_22,May_22,Jun_22,Jul_22,Aug_22,Sep_22,Oct_22,Nov_22,Dec_22)

####Loading the population data of all the 36 districts in Maharashtra (2017-2022)####
pop <- read_excel("/Users/abhimanyu/Documents//population.xlsx")
data  <- subset(data, Spectrum_Current_State == "Maharashtra") ##Filter out the data from Maharashtra

####Data Preprocessing####
N1=length(unique(data$Spectrum_Current_District)) ##number of districts before cleaning
data$Spectrum_Current_District <- gsub("^Mumbai.*", "Mumbai Suburban", data$Spectrum_Current_District)
data$Spectrum_Current_District <- gsub(".*MC$", "Mumbai City", data$Spectrum_Current_District)
data$Spectrum_Current_District <- gsub("Pune Rural", "Pune", data$Spectrum_Current_District)
data$Spectrum_Current_District <- gsub("PUNE RURAL", "Pune", data$Spectrum_Current_District)
data$Spectrum_Current_District <- gsub("LATUR", "Latur", data$Spectrum_Current_District)
data$Spectrum_Current_District <- gsub("CHANDRAPUR", "Chandrapur", data$Spectrum_Current_District)
data$Spectrum_Current_District <- gsub("PARBHANI", "Parbhani", data$Spectrum_Current_District)
data$Spectrum_Current_District <- gsub("SINDHUDURG", "Sindhudurg", data$Spectrum_Current_District)
data$Spectrum_Current_District <- gsub("NAGPUR", "Nagpur", data$Spectrum_Current_District)
data$Spectrum_Current_District <- gsub("JALNA", "Jalna", data$Spectrum_Current_District)
data$Spectrum_Current_District <- gsub("NANDED", "Nanded", data$Spectrum_Current_District)
MH_sp$NAME_2 <- gsub("Bid", "Beed", MH_sp$NAME_2)
MH_sp$NAME_2 <- gsub("Garhchiroli", "Gadchiroli", MH_sp$NAME_2)
MH_sp$NAME_2 <- gsub("Raigarh", "Raigad", MH_sp$NAME_2)
MH_sp$NAME_2 <- gsub("Aurangabad","Chhatrapati Sambhajinagar", MH_sp$NAME_2)
MH_sp$NAME_2 <- gsub("Osmanabad","Dharashiv", MH_sp$NAME_2)
pop$District <- gsub("Osmanabad","Dharashiv", pop$District)
N1=length(unique(data$Spectrum_Current_District)) ##number of districts after cleaning (~36)

####Ensure same column name for districts in both the files####
names(MH_sp)[names(MH_sp) == "NAME_2"] <- "District"
names(data)[names(data) == "Spectrum_Current_District"] <- "District"

####Aggregate infection data by district####
district_infection_count <- data %>% group_by(District) %>% summarise(num_cases = n())  # Count the number of cases per district

MH_sp <- MH_sp %>%
  left_join(district_infection_count, by = c("District" = "District")) %>%
  left_join(pop, by = c("District" = "District"))

# Calculate proportions or rates (notification per capita)
MH_sp$proportion <- MH_sp$num_cases / MH_sp$population_2022

MH_sp <- MH_sp %>%
  filter(District != "Mumbai City")
MH_sp <- MH_sp %>%
  filter(District != "Mumbai Suburban")


# Create adjacency-based weight matrix
w_Q <- poly2nb(MH_sp, queen = TRUE)
W1 <- nb2listw(w_Q, style = "B", zero.policy = TRUE)  # Binary weights for spatial autocorrelation

# Perform Moran's I test (Global spatial autocorrelation)
moran.test(MH_sp$proportion, W1)
localG(MH_sp$proportion, W1)

# Calculate Local Moran's I (LISA) for clusters
local_moran <- localmoran(MH_sp$proportion, W1)
#result_g=as.data.frame(localG(MH_sp$proportion,listw=W1))


# Add LISA results to the dataframe
MH_sp$Ii <- local_moran[,1]  # Local Moran statistic
MH_sp$E.Ii <- local_moran[,2]  # Expected value
MH_sp$Var.Ii <- local_moran[,3]  # Variance
MH_sp$Z.Ii <- local_moran[,4]  # Z-score
MH_sp$p_value <- local_moran[,5]  # p-value


# Classify the clusters
MH_sp$cluster <- "Not Significant"  # Initialize

MH_sp$cluster[MH_sp$Z.Ii > 0 & MH_sp$proportion > mean(MH_sp$proportion)] <- "High-High"
MH_sp$cluster[MH_sp$Z.Ii > 0 & MH_sp$proportion < mean(MH_sp$proportion)] <- "Low-Low"
MH_sp$cluster[MH_sp$Z.Ii < 0 & MH_sp$proportion > mean(MH_sp$proportion)] <- "High-Low"
MH_sp$cluster[MH_sp$Z.Ii < 0 & MH_sp$proportion < mean(MH_sp$proportion)] <- "Low-High"

# Ensure clusters with p-value > 0.05 are marked as "Not Significant"
MH_sp$cluster[MH_sp$p_value > 0.05] <- "Not Significant"


# Define color palette for clusters
color_palette <- c(
  "High-High" = "red", 
  "Low-Low" = "blue", 
  "Low-High" = "lightblue", 
  "High-Low" = "pink", 
  "Not Significant" = "grey"
)

# Plot the spatial clusters
ggplot(data = MH_sp) +
  geom_sf(aes(fill = cluster), color = "black", size = 0.2) +
  scale_fill_manual(values = color_palette) +
  theme_minimal() +
  labs(title = "LISA Clusters for Maharashtra 2022",
       fill = "Cluster Type") +
  theme(legend.position = "bottom")

